#!/usr/bin/env python
import sys
import os

# Add parent directory to path to import supabase_utils
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from supabase_utils import generate_adopter_uuid

def analyze_pattern_structure(suffix):
    """Analyze if a 12-digit suffix follows a simple, recognizable pattern"""
    print(f"Analyzing: {suffix}")
    
    unique_digits = set(suffix)
    print(f"Unique digits: {sorted(list(unique_digits))} (count: {len(unique_digits)})")
    
    # Test for various simple patterns
    patterns_found = []
    
    # 1. All same digits
    if len(unique_digits) == 1:
        patterns_found.append("All same digit")
    
    # 2. AB pattern (2-char repeated 6 times)
    if suffix == suffix[:2] * 6:
        patterns_found.append(f"AB pattern: '{suffix[:2]}' repeated 6 times")
    
    # 3. ABC pattern (3-char repeated 4 times)
    if suffix == suffix[:3] * 4:
        patterns_found.append(f"ABC pattern: '{suffix[:3]}' repeated 4 times")
    
    # 4. ABCD pattern (4-char repeated 3 times)
    if suffix == suffix[:4] * 3:
        patterns_found.append(f"ABCD pattern: '{suffix[:4]}' repeated 3 times")
    
    # 5. 6-char pattern repeated 2 times
    if suffix == suffix[:6] * 2:
        patterns_found.append(f"6-char pattern: '{suffix[:6]}' repeated 2 times")
    
    # 6. Simple variation (like 999999999911)
    if len(suffix) == 12:
        first_10 = suffix[:10]
        last_2 = suffix[10:]
        if len(set(first_10)) == 1 and len(set(last_2)) <= 2:
            patterns_found.append(f"Simple variation: '{first_10}' + '{last_2}'")
    
    # 7. Check if it's just very simple (≤3 unique digits)
    if len(unique_digits) <= 3:
        patterns_found.append("Very simple (≤3 unique digits)")
    
    print(f"Patterns found: {patterns_found}")
    print(f"Is simple pattern: {len(patterns_found) > 0}")
    print(f"Valid (≤4 unique): {len(unique_digits) <= 4}")
    print("-" * 50)
    
    return len(patterns_found) > 0 and len(unique_digits) <= 4

def test_known_working_patterns():
    """Test patterns that we know work in the database"""
    print("=== Testing Known Working Patterns ===\n")
    
    working_patterns = [
        "151515151515",  # AB pattern
        "161616161616",  # AB pattern
        "171717171717",  # AB pattern
        "181818181818",  # AB pattern
        "123123123123",  # ABC pattern
        "101010101010",  # AB pattern
        "121212121212",  # AB pattern
        "212121212121",  # AB pattern
        "232323232323",  # AB pattern
        "789789789789",  # ABC pattern
        "999999999911",  # Simple variation
        "111111111111",  # All same
    ]
    
    all_valid = True
    for pattern in working_patterns:
        is_valid = analyze_pattern_structure(pattern)
        if not is_valid:
            all_valid = False
    
    print(f"All known working patterns validated: {all_valid}\n")
    return all_valid

def test_known_failing_patterns():
    """Test patterns that we know DON'T work in the database"""
    print("=== Testing Known Failing Patterns ===\n")
    
    failing_patterns = [
        "123456789012",  # Too many unique digits, no clear pattern
        "567890123456",  # Too many unique digits, no clear pattern
        "192837465021",  # Too many unique digits, no clear pattern
        "4958459985**",  # Random arrangement (using ** to make it 12 chars)
        "495845998512",  # Random arrangement but 12 digits
    ]
    
    # Fix the failing patterns to be exactly 12 digits
    failing_patterns = [
        "123456789012",  # Too many unique digits
        "567890123456",  # Too many unique digits
        "192837465021",  # Too many unique digits
        "495845998512",  # Random arrangement, even though ≤4 unique
        "498759845129",  # Another random arrangement
    ]
    
    all_invalid = True
    for pattern in failing_patterns:
        print(f"Testing failing pattern: {pattern}")
        is_valid = analyze_pattern_structure(pattern)
        if is_valid:
            print(f"WARNING: Pattern {pattern} was detected as valid but should fail!")
            all_invalid = False
        print()
    
    print(f"All known failing patterns correctly identified as invalid: {all_invalid}\n")
    return all_invalid

def test_generated_patterns():
    """Test patterns generated by our function"""
    print("=== Testing Generated Patterns ===\n")
    
    all_valid = True
    for i in range(10):
        print(f"Generated UUID {i+1}:")
        uuid_str = generate_adopter_uuid()
        
        # Extract suffix
        prefix = "5a1f43e5-b1e6-4c5c-bc5a-"
        suffix = uuid_str[len(prefix):]
        
        is_valid = analyze_pattern_structure(suffix)
        if not is_valid:
            all_valid = False
            print(f"ERROR: Generated invalid pattern!")
        print()
    
    print(f"All generated patterns are valid: {all_valid}\n")
    return all_valid

if __name__ == "__main__":
    print("=== Testing Simple Pattern Recognition ===\n")
    
    # Test all scenarios
    results = []
    results.append(test_known_working_patterns())
    results.append(test_known_failing_patterns())
    results.append(test_generated_patterns())
    
    print("=== Summary ===")
    print(f"Known working patterns validated: {results[0]}")
    print(f"Known failing patterns correctly identified: {results[1]}")
    print(f"Generated patterns are valid: {results[2]}")
    print(f"Overall success: {all(results)}")
    
    if all(results):
        print("\n✅ All tests passed! Pattern generation should work correctly.")
    else:
        print("\n❌ Some tests failed. Check the output above for details.") 